#!/usr/bin/env php
<?php

const ENV_FILE_PATH = __DIR__.'/.env';

if (!file_exists(ENV_FILE_PATH)) {
    die('ERROR: Please create a .env file in the format from the README');
}

if (!defined('OPENSSL_KEYTYPE_EC') && !extension_loaded('openssl')) {
    die('Openssl php extension missing');
}

if (!extension_loaded('gmp')) {
    die('GMP php extension missing');
}

if ((float)PHP_VERSION < 7.2) {
    die('The minimum php version required is 7.2');
}

// Base58 encoding/decoding functions - all credits go to https://github.com/stephen-hill/base58php
function base58Encode($string)
{
    $alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
    $base = strlen($alphabet);
    // Type validation
    if (is_string($string) === false) {
        return false;
    }
    // If the string is empty, then the encoded string is obviously empty
    if ($string === '') {
        return '';
    }
    // Now we need to convert the byte array into an arbitrary-precision decimal
    // We basically do this by performing a base256 to base10 conversion
    $hex = unpack('H*', $string);
    $hex = reset($hex);
    $decimal = gmp_init($hex, 16);
    // This loop now performs base 10 to base 58 conversion
    // The remainder or modulo on each loop becomes a base 58 character
    $output = '';
    while (gmp_cmp($decimal, $base) >= 0) {
        [$decimal, $mod] = gmp_div_qr($decimal, $base);
        $output .= $alphabet[gmp_intval($mod)];
    }
    // If there's still a remainder, append it
    if (gmp_cmp($decimal, 0) > 0) {
        $output .= $alphabet[gmp_intval($decimal)];
    }
    // Now we need to reverse the encoded data
    $output = strrev($output);
    // Now we need to add leading zeros
    $bytes = str_split($string);
    foreach ($bytes as $byte) {
        if ($byte === "\x00") {
            $output = $alphabet[0].$output;
            continue;
        }
        break;
    }
    return $output;
}

function base58Decode($base58)
{
    $alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
    $base = strlen($alphabet);

    // Type Validation
    if (is_string($base58) === false) {
        return false;
    }
    // If the string is empty, then the decoded string is obviously empty
    if ($base58 === '') {
        return '';
    }
    $indexes = array_flip(str_split($alphabet));
    $chars = str_split($base58);
    // Check for invalid characters in the supplied base58 string
    foreach ($chars as $char) {
        if (isset($indexes[$char]) === false) {
            return false;
        }
    }
    // Convert from base58 to base10
    $decimal = gmp_init($indexes[$chars[0]], 10);
    for ($i = 1, $l = count($chars); $i < $l; $i++) {
        $decimal = gmp_mul($decimal, $base);
        $decimal = gmp_add($decimal, $indexes[$chars[$i]]);
    }
    // Convert from base10 to base256 (8-bit byte array)
    $output = '';
    while (gmp_cmp($decimal, 0) > 0) {
        [$decimal, $byte] = gmp_div_qr($decimal, 256);
        $output = pack('C', gmp_intval($byte)).$output;
    }
    // Now we need to add leading zeros
    foreach ($chars as $char) {
        if ($indexes[$char] === 0) {
            $output = "\x00".$output;
            continue;
        }
        break;
    }
    return $output;
}

function pem2coin($data)
{
    $data = str_replace(
        [
            '-----BEGIN PUBLIC KEY-----',
            '-----END PUBLIC KEY-----',
            '-----BEGIN EC PRIVATE KEY-----',
            '-----END EC PRIVATE KEY-----',
            "\n",
        ],
        '',
        $data
    );
    $data = base64_decode($data);
    return base58Encode($data);
}

function getAddress($hash)
{
    for ($i = 0; $i < 9; $i++) {
        $hash = hash('sha512', $hash, true);
    }
    return base58Encode($hash);
}

function coin2pem($data, $is_private_key = false)
{
    $data = base58Decode($data);
    $data = base64_encode($data);

    $dat = str_split($data, 64);
    $data = implode("\n", $dat);

    if ($is_private_key) {
        return "-----BEGIN EC PRIVATE KEY-----\n{$data}\n-----END EC PRIVATE KEY-----\n";
    }
    return "-----BEGIN PUBLIC KEY-----\n{$data}\n-----END PUBLIC KEY-----\n";
}

function ecSign($data, $key)
{
    $private_key = coin2pem($key, true);

    $pkey = openssl_pkey_get_private($private_key);

    openssl_sign($data, $signature, $pkey, OPENSSL_ALGO_SHA256);

    return base58Encode($signature);
}

function ecVerify($data, $signature, $key)
{
    $public_key = coin2pem($key);

    $signature = base58Decode($signature);

    $pkey = openssl_pkey_get_public($public_key);

    $res = openssl_verify($data, $signature, $pkey, OPENSSL_ALGO_SHA256);

    return $res === 1;
}

$f = file(ENV_FILE_PATH);

$masternode_public_key = trim($f[0]);
$masternode_private_key = trim($f[1]);
$node = trim($f[2]);

if (empty($masternode_public_key)) {
    die('ERROR: Invalid public key');
}

if (empty($masternode_private_key)) {
    die('ERROR: Invalid public key');
}

if (empty($node)) {
    $node = 'http://127.0.0.1';
}

$generator = getAddress($masternode_public_key);

// make sure it's not accessible in the browser
if (PHP_SAPI !== 'cli') {
    die('This should only be run as cli');
}

$res = file_get_contents("{$node}/mine.php?q=getWork");
$data = json_decode($res, true);
if ($data['status'] !== 'ok') {
    echo "Using external nodes\n";
    $f = file('http://api.arionum.com/peers.txt');
    shuffle($f);
    $i = 0;
    foreach ($f as $x) {
        if (strlen(trim($x)) > 5) {
            $node = trim($x);
            $i++;
            $res = file_get_contents("{$node}/mine.php?q=getWork");
            $data = json_decode($res, true);
            if ($i > 5 || $data['status'] === 'ok') {
                break;
            }
        }
    }

    if ($data['status'] !== 'ok') {
        die("Invalid response from the node!\n");
    }
}

$height = $data['data']['height'];

if (($height - 1) % 3 === 2) {
    try {
        $random = \random_bytes(32);
    } catch (Exception $e) {
        exit('Unable to generate a cryptographically strong IV.');
    }

    $nonce = preg_replace('/[^a-zA-Z0-9]/', '', $random);

    $base = $masternode_public_key.'-'.$nonce.'-'.$data['data']['block'].'-'.$data['data']['difficulty'];
    $argon = password_hash(
        $base,
        PASSWORD_ARGON2I,
        ['memory_cost' => 16384, 'time_cost' => 4, 'threads' => 4]
    );

    $date = time();
    $tdata = $data['data']['data'];
    $difficulty = $data['data']['difficulty'];
    $json = json_encode($tdata);
    $info = "{$generator}-{$height}-{$date}-{$nonce}-{$json}-{$difficulty}-{$argon}";

    $signature = ecSign($info, $masternode_private_key);


    $msg = '';
    $x = [
        'src' => $generator,
        'dst' => $generator,
        'val' => $data['data']['reward'],
        'version' => 0,
        'date' => $date,
        'message' => '',
        'fee' => '0.00000000',
        'public_key' => $masternode_public_key,
    ];

    ksort($x);

    $info = implode('-', [$x['val'], $x['fee'], $x['dst'], $x['message'], $x['version'], $x['public_key'], $x['date']]);

    $reward_signature = ecSign($info, $masternode_private_key);

    $postData = http_build_query(
        [
            'argon' => $argon,
            'nonce' => $nonce,
            'data' => $json,
            'public_key' => $masternode_public_key,
            'signature' => $signature,
            'reward_signature' => $reward_signature,
            'date' => $date,
        ]
    );

    $opts = [
        'http' =>
            [
                'method' => 'POST',
                'header' => 'Content-type: application/x-www-form-urlencoded',
                'content' => $postData,
            ],
    ];

    $context = stream_context_create($opts);

    $res = file_get_contents("{$node}/mine.php?q=submitBlock", false, $context);

    $data = json_decode($res, true);

    if ($data['status'] === 'ok') {
        echo "\n--> Masternode block confirmed.\n";
        return true;
    }

    echo "--> The Masternode block did not confirm.\n\n";
    return false;
}

echo "Not a masternode block!\n";
